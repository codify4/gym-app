import BotSheet from '@/components/bot-sheet'
import BottomSheet from '@gorhom/bottom-sheet'
import { router } from 'expo-router'
import { ChevronLeft, Search } from 'lucide-react-native'
import { useRef, useState } from 'react'
import { View, Text, SafeAreaView, TextInput, ScrollView, Platform, Alert } from 'react-native'
import * as Haptics from 'expo-haptics'
import Exercise from '@/components/suggestions/exercise'
import { Exercise as ExerciseType } from '@/lib/exercises'
import ExerciseInfo from '@/components/routine/exercise-info'
import { useWorkouts } from '@/hooks/use-workouts'
import { useAuth } from '@/context/auth'
import { Workout } from '@/lib/workouts'
import { exercisesList } from '@/constants/exercise-list'
import AddToWorkout from '@/components/suggestions/add-to-workout'

// Import exercises from the constants file
export const exercises: ExerciseType[] = exercisesList;

const Exercises = () => {
    const { session } = useAuth();
    const user = session?.user
    const { workouts, addExercise } = useWorkouts(user?.id);

    const addSheetRef = useRef<BottomSheet>(null);
    const infoSheetRef = useRef<BottomSheet>(null);

    const [selectedExercise, setSelectedExercise] = useState<ExerciseType>(exercises[0]);
    const [selectedWorkoutIds, setSelectedWorkoutIds] = useState<string[]>([]);
    const [searchQuery, setSearchQuery] = useState<string>('');
    const [isAdding, setIsAdding] = useState(false);
    
    // Filter exercises based on search query
    const filteredExercises = searchQuery.trim() === '' 
        ? exercises 
        : exercises.filter(ex => 
            ex.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
            ex.body_part?.toLowerCase().includes(searchQuery.toLowerCase())
          );

    const handleOpenAddSheet = (exercise: ExerciseType) => {
        setSelectedExercise(exercise);
        setSelectedWorkoutIds([]);
        if (Platform.OS !== "web") {
            Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light)
        }
        addSheetRef.current?.expand()
    }

    const handleSelectedWorkout = (workout: Workout) => {
        if (selectedWorkoutIds.includes(workout.workout_id)) {
            setSelectedWorkoutIds(selectedWorkoutIds.filter(id => id !== workout.workout_id));
        } else {
            setSelectedWorkoutIds([...selectedWorkoutIds, workout.workout_id]);
        }
        if (Platform.OS !== "web") {
            Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light)
        }
    }

    const handleOpenInfoSheet = () => {
        if (Platform.OS !== "web") {
            Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light)
        }
        infoSheetRef.current?.expand()
    }

    const handleAddToWorkouts = async () => {
        if (selectedWorkoutIds.length === 0) {
            Alert.alert("No Workouts Selected", "Please select at least one workout to add this exercise to.");
            return;
        }

        try {
            setIsAdding(true);
            
            // Create an exercise data object from selectedExercise
            const exerciseData = {
                name: selectedExercise.name,
                sets: selectedExercise.sets,
                reps: selectedExercise.reps,
                weight: selectedExercise.weight,
                image: selectedExercise.image, // Include image reference
                tips: selectedExercise.tips,
                body_part: selectedExercise.body_part,
                exercise_id: 0, // This will be auto-generated by the database, but needed for the type
            };

            // Add the exercise to each selected workout
            const addPromises = selectedWorkoutIds.map(workoutId => 
                addExercise(workoutId, exerciseData)
            );

            await Promise.all(addPromises);
            
            // Close the sheet and reset selections
            addSheetRef.current?.close();
            setSelectedWorkoutIds([]);
            
            // Show success message
            Alert.alert(
                "Success", 
                `${selectedExercise.name} has been added to ${selectedWorkoutIds.length} workout${selectedWorkoutIds.length > 1 ? 's' : ''}.`
            );
        } catch (error) {
            console.error("Error adding exercise to workouts:", error);
            Alert.alert("Error", "There was a problem adding this exercise to your workout(s).");
        } finally {
            setIsAdding(false);
        }
    };

    return (
        <SafeAreaView className='flex-1 bg-black'>
            <View className='flex-row items-center justify-between p-5'>
                <ChevronLeft size={24} color={"white"} onPress={() => router.push('/(tabs)/suggest')} />
                <Text className='text-white text-xl font-poppins-semibold'>Exercise Library</Text>
                <View></View>
            </View>
            <View className='flex-row items-center justify-start bg-neutral-900 rounded-3xl p-5 mt-4 gap-3 mx-5 border border-neutral-700'>
                <Search size={24} color={"white"} />
                <TextInput 
                    placeholder='Search for an exercise' 
                    className='bg-neutral-900 rounded-3xl font-poppins flex-1 text-white'
                    placeholderTextColor="#666"
                    value={searchQuery}
                    onChangeText={setSearchQuery}
                />
            </View>

            <ScrollView className='px-5 mt-5 h-full'>
                {filteredExercises.map((exercise, index) => (
                    <Exercise 
                        key={exercise.exercise_id}
                        exercise={exercise}
                        index={index}
                        onInfoPress={() => handleOpenInfoSheet()}
                        onAddPress={() => handleOpenAddSheet(exercise)}
                    />
                ))}
                {filteredExercises.length === 0 && (
                    <Text className='text-white text-center mt-10'>No exercises found matching "{searchQuery}"</Text>
                )}
            </ScrollView>

            <BotSheet ref={addSheetRef} snapPoints={["60%"]}>
                <AddToWorkout 
                    workouts={workouts}
                    selectedWorkoutIds={selectedWorkoutIds}
                    handleSelectedWorkout={handleSelectedWorkout}
                    handleAddToWorkouts={handleAddToWorkouts}
                    isAdding={isAdding}
                    addSheetRef={addSheetRef}
                />
            </BotSheet>
            <BotSheet ref={infoSheetRef} snapPoints={["88%"]}>
                <ExerciseInfo exercise={selectedExercise} />
            </BotSheet>
        </SafeAreaView>
  )
}
export default Exercises